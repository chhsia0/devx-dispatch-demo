#!mesosphere/dispatch-starlark:v0.6

load("github.com/mesosphere/dispatch-catalog/starlark/stable/k8s@0.0.7", "secret_var")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/kaniko@0.0.7", "kaniko")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/pipeline@0.0.7", "image_reference", "push")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/git@0.0.7", "git_resource", "git_checkout_dir", "git_revision")

src_repo = git_resource("src-repo")

gitops_repo = git_resource("gitops-repo",
    url="https://github.com/chhsia0/devx-dispatch-gitops-demo",
    revision="jenkins-demo"
)

docker_image = kaniko("build-image", src_repo, "chhsiao/devx-dispatch-demo")

task("deploy",
    inputs=[src_repo, docker_image, gitops_repo],
    steps=[
        k8s.corev1.Container(
            name="update-gitops-repo",
            image="mesosphere/update-gitops-repo:1.2.2",
            workingDir=git_checkout_dir(gitops_repo),
            args=[
                "-git-revision={}".format(git_revision(src_repo)),
                "-base-branch={}".format(git_revision(gitops_repo)),
                "-create-pull-request",
                "-merge-pull-request",
                "-substitute=imageName={}".format(image_reference(docker_image))
            ]
        ),
        k8s.corev1.Container(
            name="wait",
            image="lachlanevenson/k8s-kubectl",
            command=["sh", "-c", """
                GET_DEPLOYMENT_IMAGE="kubectl get deployment/hello-world --output=jsonpath={{.spec.template.spec.containers[0].image}}"
                while [ "$($GET_DEPLOYMENT_IMAGE)" != "{}" ]; do
                    sleep 1
                done
                kubectl wait --for=condition=available deployment/hello-world
            """.format(image_reference(docker_image))]
        )
    ]
)

task("run-jenkins",
    inputs=["deploy"],
    steps=[
        k8s.corev1.Container(
            name="submit-build",
            image="chhsiao/alpine",
            command=["sh", "-c", """
                location=$(
                    curl -s -u $USERNAME:$PASSWORD -X POST -I https://jenkins.mesosphere.com/service/jenkins/job/dispatch-remote-test-pipeline/build |
                        sed -n -E "s#^Location: (.*)/.*#\\1/api/json#p"
                )
                echo $location
                executable=$(
                    while ! curl -s -u $USERNAME:$PASSWORD $location |
                         jq -r -e '.executable.url' > /dev/null; do
                         sleep 1
                    done
                )
                echo $executable
                while curl -s -u $USERNAME:$PASSWORD $executable/api/json |
                    jq -e .building > /dev/null; do
                    sleep 1
                done
                curl -s -u $USERNAME:$PASSWORD $executable/api/json | jq .
            """],
            env=[
                k8s.corev1.EnvVar(
                    name="USERNAME",
                    valueFrom=secret_var("jenkins-secret", "username")
                ),
                k8s.corev1.EnvVar(
                    name="PASSWORD",
                    valueFrom=secret_var("jenkins-secret", "password")
                )
            ]
        )
    ]
)

action(tasks=["run-jenkins"], on=push(branches=["jenkins-demo"]))
