#!mesosphere/dispatch-starlark:v0.6

load("github.com/mesosphere/dispatch-catalog/starlark/stable/k8s@0.0.7", "secret_var")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/kaniko@0.0.7", "kaniko")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/pipeline@0.0.7", "image_resource", "image_reference", "storage_resource", "push")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/git@0.0.7", "git_resource", "git_checkout_dir", "git_revision")

src_repo = git_resource("src-repo")

gitops_repo = git_resource("gitops-repo",
    url="https://github.com/chhsia0/devx-dispatch-gitops-demo",
    revision="jenkins-demo"
)

def kaniko2(task_name, git_name, image_repos, tag="$(context.build.name)", context=".", dockerfile="Dockerfile", build_args={}, inputs=[], outputs=[], steps=[], **kwargs):
    """
    Build a Docker image using Kaniko.
    """

    image_names = [
        image_resource(
            "image{}-{}".format(i, task_name),
            url=image_repos[i]
        ) for i in range(len(image_repos))
    ]

    inputs = inputs + [git_name]
    outputs = outputs + image_names

    args = [
        "--context={}".format(context),
        "--dockerfile={}".format(dockerfile)
    ]

    for k, v in build_args.items():
        args.append("--build-arg={}={}".format(k, v))

    steps = steps + [
        k8s.corev1.Container(
            name="build",
            image="gcr.io/kaniko-project/executor:latest",
            args=args + [
                "--destination=$(resources.outputs.{}.url):{}".format(image_name, tag),
                "--oci-layout-path=$(resources.outputs.{}.path)".format(image_name)
            ],
            workingDir=git_checkout_dir(git_name)
        ) for image_name in image_names
    ]

    task(task_name, inputs=inputs, outputs=outputs, steps=steps, **kwargs)

    return image_names

docker_images = kaniko("build-image", src_repo, ["chhsiao/devx-dispatch-demo", "chhsiao/devx-dispatch-demo-2"])

task("deploy",
    inputs=[src_repo, docker_images[0], gitops_repo],
    steps=[
        k8s.corev1.Container(
            name="update-gitops-repo",
            image="mesosphere/update-gitops-repo:1.2.2",
            workingDir=git_checkout_dir(gitops_repo),
            args=[
                "-git-revision={}".format(git_revision(src_repo)),
                "-base-branch={}".format(git_revision(gitops_repo)),
                "-create-pull-request",
                "-merge-pull-request",
                "-substitute=imageName={}".format(image_reference(docker_images[0]))
            ]
        ),
        k8s.corev1.Container(
            name="wait",
            image="lachlanevenson/k8s-kubectl",
            command=["sh", "-c", """
                GET_DEPLOYMENT_IMAGE="kubectl get deployment/hello-world --output=jsonpath={{.spec.template.spec.containers[0].image}}"
                while [ "$($GET_DEPLOYMENT_IMAGE)" != "{}" ]; do
                    sleep 1
                done
                kubectl wait --for=condition=available deployment/hello-world
            """.format(image_reference(docker_images[0]))]
        )
    ]
)

artifacts = storage_resource("jenkins-artifacts")

task("run-jenkins",
    inputs=["deploy"],
    outputs=[artifacts],
    steps=[
        k8s.corev1.Container(
            name="submit-build",
            image="chhsiao/alpine",
            command=["sh", "-c", """
                location=$(
                    curl -s -u $USERNAME:$PASSWORD -X POST -I \
                        https://jenkins.mesosphere.com/service/jenkins/job/dispatch-remote-test-pipeline/build |
                        sed -n -E "s#^Location: (.*)/.*#\\1/api/json#p"
                )
                echo $location

                echo -n Pending
                while ! executable=$(curl -s -u $USERNAME:$PASSWORD $location | jq -r -e '.executable.url'); do
                    echo -n . && sleep 1
                done
                echo && echo $executable

                echo -n Running
                while curl -s -u $USERNAME:$PASSWORD $executable/api/json | jq -e .building > /dev/null; do
                    echo -n . && sleep 1
                done
                echo
                
                curl -s -u $USERNAME:$PASSWORD $executable/artifact/*zip*/archive.zip -o archive.zip
                unzip archive.zip -d $(resources.outputs.{}.path)
            """.format(artifacts)],
            env=[
                k8s.corev1.EnvVar(
                    name="USERNAME",
                    valueFrom=secret_var("jenkins-secret", "username")
                ),
                k8s.corev1.EnvVar(
                    name="PASSWORD",
                    valueFrom=secret_var("jenkins-secret", "password")
                )
            ]
        )
    ]
)

action(tasks=["build-image"], on=push())
